ARM GAS  /tmp/ccazkJww.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	2
  20              		.thumb
  21              		.thumb_func
  23              	MX_GPIO_Init:
  24              	.LFB67:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   ** This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * COPYRIGHT(c) 2018 STMicroelectronics
  13:Src/main.c    ****   *
  14:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  15:Src/main.c    ****   * are permitted provided that the following conditions are met:
  16:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  17:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  18:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  19:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  20:Src/main.c    ****   *      and/or other materials provided with the distribution.
  21:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  22:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  23:Src/main.c    ****   *      without specific prior written permission.
  24:Src/main.c    ****   *
  25:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  26:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  27:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  28:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  29:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  30:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  31:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  32:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  33:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  /tmp/ccazkJww.s 			page 2


  34:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:Src/main.c    ****   *
  36:Src/main.c    ****   ******************************************************************************
  37:Src/main.c    ****   */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  40:Src/main.c    **** #include "main.h"
  41:Src/main.c    **** #include "stm32f1xx_hal.h"
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE BEGIN Includes */
  44:Src/main.c    **** #include <stdio.h>
  45:Src/main.c    **** #include <stdbool.h>
  46:Src/main.c    **** #include "LCD.h"
  47:Src/main.c    **** #include "MenuLibrary.h"
  48:Src/main.c    **** //#include "MenuLibrary.h"
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE END Includes */
  51:Src/main.c    **** 
  52:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  53:Src/main.c    **** TIM_HandleTypeDef htim2;
  54:Src/main.c    **** TIM_HandleTypeDef htim3;
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE BEGIN PV */
  57:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END PV */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  62:Src/main.c    **** void SystemClock_Config(void);
  63:Src/main.c    **** static void MX_GPIO_Init(void);
  64:Src/main.c    **** static void MX_TIM2_Init(void);
  65:Src/main.c    **** static void MX_TIM3_Init(void);
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE BEGIN PFP */
  68:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE BEGIN 0 */
  73:Src/main.c    **** 
  74:Src/main.c    **** 
  75:Src/main.c    **** 
  76:Src/main.c    **** volatile unsigned int Lines = 3;
  77:Src/main.c    **** volatile unsigned int MenuLayers = MENU_LAYERS;
  78:Src/main.c    **** volatile unsigned int CurrentLayer = 0;
  79:Src/main.c    **** volatile int CurrentMenuPosition[MENU_LAYERS];
  80:Src/main.c    **** 
  81:Src/main.c    **** volatile int portAPin15Counter=0;
  82:Src/main.c    **** volatile _Bool SetLCD = false;
  83:Src/main.c    **** volatile unsigned int PeriodsToGo = 1000;
  84:Src/main.c    **** volatile _Bool UpdateLCD = true;
  85:Src/main.c    **** volatile unsigned int PhaseLCD = 1;
  86:Src/main.c    **** volatile const int TotalPhasesLCDSetup = 13;
  87:Src/main.c    **** volatile const int TotalPhasesLCDUpdate = 8;
  88:Src/main.c    **** volatile char Text[4][16];
  89:Src/main.c    **** 
  90:Src/main.c    **** volatile unsigned int colomn = 1;
ARM GAS  /tmp/ccazkJww.s 			page 3


  91:Src/main.c    **** volatile unsigned int row = 1;
  92:Src/main.c    **** 
  93:Src/main.c    **** volatile const int CheckCircles = 250;
  94:Src/main.c    **** volatile const int jOnThreshold = 150;
  95:Src/main.c    **** volatile int jTimer = 0;
  96:Src/main.c    **** volatile int jOnUP=0; // PA15
  97:Src/main.c    **** volatile int jOnDOWN=0; // PC10
  98:Src/main.c    **** volatile int jOnOK=0; // PB4
  99:Src/main.c    **** volatile int jOnBACK=0; // PB5
 100:Src/main.c    **** 
 101:Src/main.c    **** 
 102:Src/main.c    **** 
 103:Src/main.c    **** 
 104:Src/main.c    **** 
 105:Src/main.c    **** 
 106:Src/main.c    **** //HAL_TIM_Base_Init(&htim2);
 107:Src/main.c    **** //HAL_TIM_Base_Start(&htim2);
 108:Src/main.c    **** 
 109:Src/main.c    **** /* USER CODE END 0 */
 110:Src/main.c    **** 
 111:Src/main.c    **** int main(void)
 112:Src/main.c    **** {
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE BEGIN 1 */
 115:Src/main.c    ****   /* CurrentMenuPosition initialization */
 116:Src/main.c    ****   volatile int i=0;
 117:Src/main.c    ****   for (i=0; i<MenuLayers; i++)
 118:Src/main.c    ****   {
 119:Src/main.c    ****     CurrentMenuPosition[i]=0;
 120:Src/main.c    ****   };
 121:Src/main.c    ****   CurrentMenuPosition[CurrentLayer]=1;
 122:Src/main.c    ****   /* Text initialization */
 123:Src/main.c    ****   volatile int bufPosition = CurrentMenuPosition[CurrentLayer];
 124:Src/main.c    ****   sprintf(Text[0],MenuTitle(CurrentMenuPosition));
 125:Src/main.c    ****   CurrentMenuPosition[CurrentLayer]=bufPosition;
 126:Src/main.c    ****   for (i=1; i<Lines+1; i++)
 127:Src/main.c    ****   {
 128:Src/main.c    ****     sprintf(Text[i],MenuOption(CurrentMenuPosition));
 129:Src/main.c    ****     CurrentMenuPosition[CurrentLayer]+=1;
 130:Src/main.c    ****   };
 131:Src/main.c    ****   CurrentMenuPosition[CurrentLayer]=bufPosition;
 132:Src/main.c    ****   Text[1][0] = '>';
 133:Src/main.c    ****   /*for (i=0; i<Lines+1; i++)
 134:Src/main.c    ****   {
 135:Src/main.c    ****     sprintf(Text[i],MenuOption(CurrentMenuPosition));
 136:Src/main.c    ****     CurrentMenuPosition[CurrentLayer]+=1;
 137:Src/main.c    ****   };
 138:Src/main.c    ****   CurrentMenuPosition[CurrentLayer]-=Lines;*/
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* USER CODE END 1 */
 141:Src/main.c    **** 
 142:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 143:Src/main.c    **** 
 144:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 145:Src/main.c    ****   HAL_Init();
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* USER CODE BEGIN Init */
ARM GAS  /tmp/ccazkJww.s 			page 4


 148:Src/main.c    **** 
 149:Src/main.c    ****   /* USER CODE END Init */
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* Configure the system clock */
 152:Src/main.c    ****   SystemClock_Config();
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* USER CODE END SysInit */
 157:Src/main.c    **** 
 158:Src/main.c    ****   /* Initialize all configured peripherals */
 159:Src/main.c    ****   MX_GPIO_Init();
 160:Src/main.c    ****   MX_TIM2_Init();
 161:Src/main.c    ****   MX_TIM3_Init();
 162:Src/main.c    **** 
 163:Src/main.c    ****   /* USER CODE BEGIN 2 */
 164:Src/main.c    ****   /*Setup the Pins*/
 165:Src/main.c    ****   SetPins();
 166:Src/main.c    ****   /*Debuging LED*/
 167:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 168:Src/main.c    ****   /*Initialize the timer 2*/
 169:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim2);
 170:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
 171:Src/main.c    ****   /*Initialize the timer 3*/
 172:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim3);
 173:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 174:Src/main.c    **** 
 175:Src/main.c    ****   /* USER CODE END 2 */
 176:Src/main.c    **** 
 177:Src/main.c    ****   /* Infinite loop */
 178:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 179:Src/main.c    ****   while (1)
 180:Src/main.c    ****   {
 181:Src/main.c    ****   /* USER CODE END WHILE */
 182:Src/main.c    **** 
 183:Src/main.c    ****   /* USER CODE BEGIN 3 */
 184:Src/main.c    ****   //__HAL_TIM_ENABLE(&htim2);
 185:Src/main.c    ****   //__HAL_TIM_ENABLE(&htim3);
 186:Src/main.c    ****   /*Set the cursor position*/
 187:Src/main.c    ****   /*Write a string*/
 188:Src/main.c    ****   }
 189:Src/main.c    ****   /* USER CODE END 3 */
 190:Src/main.c    **** 
 191:Src/main.c    **** }
 192:Src/main.c    **** 
 193:Src/main.c    **** /** System Clock Configuration
 194:Src/main.c    **** */
 195:Src/main.c    **** void SystemClock_Config(void)
 196:Src/main.c    **** {
 197:Src/main.c    **** 
 198:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 199:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 200:Src/main.c    **** 
 201:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 202:Src/main.c    ****     */
 203:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 204:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccazkJww.s 			page 5


 205:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 206:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 207:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 208:Src/main.c    ****   {
 209:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 210:Src/main.c    ****   }
 211:Src/main.c    **** 
 212:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks
 213:Src/main.c    ****     */
 214:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 215:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 216:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 217:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 218:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 219:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 220:Src/main.c    **** 
 221:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 222:Src/main.c    ****   {
 223:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 224:Src/main.c    ****   }
 225:Src/main.c    **** 
 226:Src/main.c    ****     /**Configure the Systick interrupt time
 227:Src/main.c    ****     */
 228:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 229:Src/main.c    **** 
 230:Src/main.c    ****     /**Configure the Systick
 231:Src/main.c    ****     */
 232:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 233:Src/main.c    **** 
 234:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 235:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 236:Src/main.c    **** }
 237:Src/main.c    **** 
 238:Src/main.c    **** /* TIM2 init function */
 239:Src/main.c    **** static void MX_TIM2_Init(void)
 240:Src/main.c    **** {
 241:Src/main.c    **** 
 242:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 243:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 244:Src/main.c    **** 
 245:Src/main.c    ****   htim2.Instance = TIM2;
 246:Src/main.c    ****   htim2.Init.Prescaler = 8;
 247:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 248:Src/main.c    ****   htim2.Init.Period = 500;
 249:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 250:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 251:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 252:Src/main.c    ****   {
 253:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 254:Src/main.c    ****   }
 255:Src/main.c    **** 
 256:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 257:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 258:Src/main.c    ****   {
 259:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 260:Src/main.c    ****   }
 261:Src/main.c    **** 
ARM GAS  /tmp/ccazkJww.s 			page 6


 262:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 263:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 264:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 265:Src/main.c    ****   {
 266:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 267:Src/main.c    ****   }
 268:Src/main.c    **** 
 269:Src/main.c    **** }
 270:Src/main.c    **** 
 271:Src/main.c    **** /* TIM3 init function */
 272:Src/main.c    **** static void MX_TIM3_Init(void)
 273:Src/main.c    **** {
 274:Src/main.c    **** 
 275:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 276:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 277:Src/main.c    **** 
 278:Src/main.c    ****   htim3.Instance = TIM3;
 279:Src/main.c    ****   htim3.Init.Prescaler = 1;
 280:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 281:Src/main.c    ****   htim3.Init.Period = 1;
 282:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 283:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 284:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 285:Src/main.c    ****   {
 286:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 287:Src/main.c    ****   }
 288:Src/main.c    **** 
 289:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 290:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 291:Src/main.c    ****   {
 292:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 293:Src/main.c    ****   }
 294:Src/main.c    **** 
 295:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 296:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 297:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 298:Src/main.c    ****   {
 299:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 300:Src/main.c    ****   }
 301:Src/main.c    **** 
 302:Src/main.c    **** }
 303:Src/main.c    **** 
 304:Src/main.c    **** /** Configure pins as
 305:Src/main.c    ****         * Analog
 306:Src/main.c    ****         * Input
 307:Src/main.c    ****         * Output
 308:Src/main.c    ****         * EVENT_OUT
 309:Src/main.c    ****         * EXTI
 310:Src/main.c    **** */
 311:Src/main.c    **** static void MX_GPIO_Init(void)
 312:Src/main.c    **** {
  26              		.loc 1 312 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  31              	.LCFI0:
ARM GAS  /tmp/ccazkJww.s 			page 7


  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 4, -24
  34              		.cfi_offset 5, -20
  35              		.cfi_offset 6, -16
  36              		.cfi_offset 7, -12
  37              		.cfi_offset 8, -8
  38              		.cfi_offset 14, -4
  39 0004 88B0     		sub	sp, sp, #32
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 56
  42              	.LBB2:
 313:Src/main.c    **** 
 314:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 315:Src/main.c    **** 
 316:Src/main.c    ****   /* GPIO Ports Clock Enable */
 317:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  43              		.loc 1 317 0
  44 0006 384B     		ldr	r3, .L3
  45 0008 9A69     		ldr	r2, [r3, #24]
  46 000a 42F01002 		orr	r2, r2, #16
  47 000e 9A61     		str	r2, [r3, #24]
  48 0010 9A69     		ldr	r2, [r3, #24]
  49 0012 02F01002 		and	r2, r2, #16
  50 0016 0192     		str	r2, [sp, #4]
  51 0018 019A     		ldr	r2, [sp, #4]
  52              	.LBE2:
  53              	.LBB3:
 318:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  54              		.loc 1 318 0
  55 001a 9A69     		ldr	r2, [r3, #24]
  56 001c 42F00802 		orr	r2, r2, #8
  57 0020 9A61     		str	r2, [r3, #24]
  58 0022 9A69     		ldr	r2, [r3, #24]
  59 0024 02F00802 		and	r2, r2, #8
  60 0028 0292     		str	r2, [sp, #8]
  61 002a 029A     		ldr	r2, [sp, #8]
  62              	.LBE3:
  63              	.LBB4:
 319:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  64              		.loc 1 319 0
  65 002c 9A69     		ldr	r2, [r3, #24]
  66 002e 42F00402 		orr	r2, r2, #4
  67 0032 9A61     		str	r2, [r3, #24]
  68 0034 9B69     		ldr	r3, [r3, #24]
  69 0036 03F00403 		and	r3, r3, #4
  70 003a 0393     		str	r3, [sp, #12]
  71 003c 039B     		ldr	r3, [sp, #12]
  72              	.LBE4:
 320:Src/main.c    **** 
 321:Src/main.c    ****   /*Configure GPIO pin Output Level */
 322:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
  73              		.loc 1 322 0
  74 003e 2B4E     		ldr	r6, .L3+4
  75 0040 3046     		mov	r0, r6
  76 0042 40F2C131 		movw	r1, #961
  77 0046 0022     		movs	r2, #0
  78 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccazkJww.s 			page 8


  79              	.LVL0:
 323:Src/main.c    ****                           |GPIO_PIN_9, GPIO_PIN_RESET);
 324:Src/main.c    **** 
 325:Src/main.c    ****   /*Configure GPIO pin Output Level */
 326:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
  80              		.loc 1 326 0
  81 004c 284D     		ldr	r5, .L3+8
  82 004e 2846     		mov	r0, r5
  83 0050 4FF46041 		mov	r1, #57344
  84 0054 0022     		movs	r2, #0
  85 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
  86              	.LVL1:
 327:Src/main.c    **** 
 328:Src/main.c    ****   /*Configure GPIO pin Output Level */
 329:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
  87              		.loc 1 329 0
  88 005a 264F     		ldr	r7, .L3+12
  89 005c 3846     		mov	r0, r7
  90 005e 4FF47061 		mov	r1, #3840
  91 0062 0022     		movs	r2, #0
  92 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
  93              	.LVL2:
 330:Src/main.c    **** 
 331:Src/main.c    ****   /*Configure GPIO pins : PC0 PC6 PC7 PC8
 332:Src/main.c    ****                            PC9 */
 333:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
  94              		.loc 1 333 0
  95 0068 40F2C133 		movw	r3, #961
  96 006c 0493     		str	r3, [sp, #16]
 334:Src/main.c    ****                           |GPIO_PIN_9;
 335:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  97              		.loc 1 335 0
  98 006e 4FF00108 		mov	r8, #1
  99 0072 CDF81480 		str	r8, [sp, #20]
 336:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 100              		.loc 1 336 0
 101 0076 0224     		movs	r4, #2
 102 0078 0794     		str	r4, [sp, #28]
 337:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 103              		.loc 1 337 0
 104 007a 3046     		mov	r0, r6
 105 007c 04A9     		add	r1, sp, #16
 106 007e FFF7FEFF 		bl	HAL_GPIO_Init
 107              	.LVL3:
 338:Src/main.c    **** 
 339:Src/main.c    ****   /*Configure GPIO pins : PB13 PB14 PB15 */
 340:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 108              		.loc 1 340 0
 109 0082 4FF46043 		mov	r3, #57344
 110 0086 0493     		str	r3, [sp, #16]
 341:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 111              		.loc 1 341 0
 112 0088 CDF81480 		str	r8, [sp, #20]
 342:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 113              		.loc 1 342 0
 114 008c 0794     		str	r4, [sp, #28]
 343:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
ARM GAS  /tmp/ccazkJww.s 			page 9


 115              		.loc 1 343 0
 116 008e 2846     		mov	r0, r5
 117 0090 04A9     		add	r1, sp, #16
 118 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 119              	.LVL4:
 344:Src/main.c    **** 
 345:Src/main.c    ****   /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
 346:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 120              		.loc 1 346 0
 121 0096 4FF47063 		mov	r3, #3840
 122 009a 0493     		str	r3, [sp, #16]
 347:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 123              		.loc 1 347 0
 124 009c CDF81480 		str	r8, [sp, #20]
 348:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 125              		.loc 1 348 0
 126 00a0 0794     		str	r4, [sp, #28]
 349:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 127              		.loc 1 349 0
 128 00a2 3846     		mov	r0, r7
 129 00a4 04A9     		add	r1, sp, #16
 130 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL5:
 350:Src/main.c    **** 
 351:Src/main.c    ****   /*Configure GPIO pin : PA15 */
 352:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_15;
 132              		.loc 1 352 0
 133 00aa 4FF40043 		mov	r3, #32768
 134 00ae 0493     		str	r3, [sp, #16]
 353:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 135              		.loc 1 353 0
 136 00b0 0024     		movs	r4, #0
 137 00b2 0594     		str	r4, [sp, #20]
 354:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 138              		.loc 1 354 0
 139 00b4 0694     		str	r4, [sp, #24]
 355:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 140              		.loc 1 355 0
 141 00b6 3846     		mov	r0, r7
 142 00b8 04A9     		add	r1, sp, #16
 143 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 144              	.LVL6:
 356:Src/main.c    **** 
 357:Src/main.c    ****   /*Configure GPIO pin : PC10 */
 358:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 145              		.loc 1 358 0
 146 00be 4FF48063 		mov	r3, #1024
 147 00c2 0493     		str	r3, [sp, #16]
 359:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 148              		.loc 1 359 0
 149 00c4 0594     		str	r4, [sp, #20]
 360:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 150              		.loc 1 360 0
 151 00c6 0694     		str	r4, [sp, #24]
 361:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 152              		.loc 1 361 0
 153 00c8 3046     		mov	r0, r6
ARM GAS  /tmp/ccazkJww.s 			page 10


 154 00ca 04A9     		add	r1, sp, #16
 155 00cc FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL7:
 362:Src/main.c    **** 
 363:Src/main.c    ****   /*Configure GPIO pins : PB4 PB5 */
 364:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 157              		.loc 1 364 0
 158 00d0 3023     		movs	r3, #48
 159 00d2 0493     		str	r3, [sp, #16]
 365:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 160              		.loc 1 365 0
 161 00d4 0594     		str	r4, [sp, #20]
 366:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 162              		.loc 1 366 0
 163 00d6 0694     		str	r4, [sp, #24]
 367:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 164              		.loc 1 367 0
 165 00d8 2846     		mov	r0, r5
 166 00da 04A9     		add	r1, sp, #16
 167 00dc FFF7FEFF 		bl	HAL_GPIO_Init
 168              	.LVL8:
 368:Src/main.c    **** 
 369:Src/main.c    **** }
 169              		.loc 1 369 0
 170 00e0 08B0     		add	sp, sp, #32
 171              	.LCFI2:
 172              		.cfi_def_cfa_offset 24
 173              		@ sp needed
 174 00e2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 175              	.L4:
 176 00e6 00BF     		.align	2
 177              	.L3:
 178 00e8 00100240 		.word	1073876992
 179 00ec 00100140 		.word	1073811456
 180 00f0 000C0140 		.word	1073810432
 181 00f4 00080140 		.word	1073809408
 182              		.cfi_endproc
 183              	.LFE67:
 185              		.section	.text._Error_Handler,"ax",%progbits
 186              		.align	2
 187              		.global	_Error_Handler
 188              		.thumb
 189              		.thumb_func
 191              	_Error_Handler:
 192              	.LFB68:
 370:Src/main.c    **** 
 371:Src/main.c    **** /* USER CODE BEGIN 4 */
 372:Src/main.c    **** /*void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 373:Src/main.c    **** {
 374:Src/main.c    ****   if (htim->Instance == htim2.Instance)
 375:Src/main.c    ****   {
 376:Src/main.c    ****     portAPin15Counter+=1;
 377:Src/main.c    ****   }
 378:Src/main.c    **** }*/
 379:Src/main.c    **** /* USER CODE END 4 */
 380:Src/main.c    **** 
 381:Src/main.c    **** /**
ARM GAS  /tmp/ccazkJww.s 			page 11


 382:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 383:Src/main.c    ****   * @param  None
 384:Src/main.c    ****   * @retval None
 385:Src/main.c    ****   */
 386:Src/main.c    **** void _Error_Handler(char * file, int line)
 387:Src/main.c    **** {
 193              		.loc 1 387 0
 194              		.cfi_startproc
 195              		@ Volatile: function does not return.
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              		@ link register save eliminated.
 199              	.LVL9:
 200              	.L6:
 388:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 389:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 390:Src/main.c    ****   while(1)
 391:Src/main.c    ****   {
 392:Src/main.c    ****   }
 201              		.loc 1 392 0 discriminator 1
 202 0000 FEE7     		b	.L6
 203              		.cfi_endproc
 204              	.LFE68:
 206 0002 00BF     		.section	.text.MX_TIM2_Init,"ax",%progbits
 207              		.align	2
 208              		.thumb
 209              		.thumb_func
 211              	MX_TIM2_Init:
 212              	.LFB65:
 240:Src/main.c    **** 
 213              		.loc 1 240 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 24
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217 0000 00B5     		push	{lr}
 218              	.LCFI3:
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 14, -4
 221 0002 87B0     		sub	sp, sp, #28
 222              	.LCFI4:
 223              		.cfi_def_cfa_offset 32
 245:Src/main.c    ****   htim2.Init.Prescaler = 8;
 224              		.loc 1 245 0
 225 0004 1848     		ldr	r0, .L12
 226 0006 4FF08043 		mov	r3, #1073741824
 227 000a 0360     		str	r3, [r0]
 246:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 228              		.loc 1 246 0
 229 000c 0823     		movs	r3, #8
 230 000e 4360     		str	r3, [r0, #4]
 247:Src/main.c    ****   htim2.Init.Period = 500;
 231              		.loc 1 247 0
 232 0010 0023     		movs	r3, #0
 233 0012 8360     		str	r3, [r0, #8]
 248:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 234              		.loc 1 248 0
 235 0014 4FF4FA72 		mov	r2, #500
ARM GAS  /tmp/ccazkJww.s 			page 12


 236 0018 C260     		str	r2, [r0, #12]
 249:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 237              		.loc 1 249 0
 238 001a 0361     		str	r3, [r0, #16]
 250:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 239              		.loc 1 250 0
 240 001c 8361     		str	r3, [r0, #24]
 251:Src/main.c    ****   {
 241              		.loc 1 251 0
 242 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 243              	.LVL10:
 244 0022 18B1     		cbz	r0, .L8
 253:Src/main.c    ****   }
 245              		.loc 1 253 0
 246 0024 1148     		ldr	r0, .L12+4
 247 0026 FD21     		movs	r1, #253
 248 0028 FFF7FEFF 		bl	_Error_Handler
 249              	.LVL11:
 250              	.L8:
 256:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 251              		.loc 1 256 0
 252 002c 06A9     		add	r1, sp, #24
 253 002e 4FF48053 		mov	r3, #4096
 254 0032 41F8103D 		str	r3, [r1, #-16]!
 257:Src/main.c    ****   {
 255              		.loc 1 257 0
 256 0036 0C48     		ldr	r0, .L12
 257 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 258              	.LVL12:
 259 003c 20B1     		cbz	r0, .L9
 259:Src/main.c    ****   }
 260              		.loc 1 259 0
 261 003e 0B48     		ldr	r0, .L12+4
 262 0040 40F20311 		movw	r1, #259
 263 0044 FFF7FEFF 		bl	_Error_Handler
 264              	.LVL13:
 265              	.L9:
 262:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 266              		.loc 1 262 0
 267 0048 0023     		movs	r3, #0
 268 004a 0093     		str	r3, [sp]
 263:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 269              		.loc 1 263 0
 270 004c 0193     		str	r3, [sp, #4]
 264:Src/main.c    ****   {
 271              		.loc 1 264 0
 272 004e 0648     		ldr	r0, .L12
 273 0050 6946     		mov	r1, sp
 274 0052 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 275              	.LVL14:
 276 0056 20B1     		cbz	r0, .L7
 266:Src/main.c    ****   }
 277              		.loc 1 266 0
 278 0058 0448     		ldr	r0, .L12+4
 279 005a 4FF48571 		mov	r1, #266
 280 005e FFF7FEFF 		bl	_Error_Handler
 281              	.LVL15:
ARM GAS  /tmp/ccazkJww.s 			page 13


 282              	.L7:
 269:Src/main.c    **** 
 283              		.loc 1 269 0
 284 0062 07B0     		add	sp, sp, #28
 285              	.LCFI5:
 286              		.cfi_def_cfa_offset 4
 287              		@ sp needed
 288 0064 5DF804FB 		ldr	pc, [sp], #4
 289              	.L13:
 290              		.align	2
 291              	.L12:
 292 0068 00000000 		.word	htim2
 293 006c 00000000 		.word	.LC0
 294              		.cfi_endproc
 295              	.LFE65:
 297              		.section	.text.MX_TIM3_Init,"ax",%progbits
 298              		.align	2
 299              		.thumb
 300              		.thumb_func
 302              	MX_TIM3_Init:
 303              	.LFB66:
 273:Src/main.c    **** 
 304              		.loc 1 273 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 24
 307              		@ frame_needed = 0, uses_anonymous_args = 0
 308 0000 00B5     		push	{lr}
 309              	.LCFI6:
 310              		.cfi_def_cfa_offset 4
 311              		.cfi_offset 14, -4
 312 0002 87B0     		sub	sp, sp, #28
 313              	.LCFI7:
 314              		.cfi_def_cfa_offset 32
 278:Src/main.c    ****   htim3.Init.Prescaler = 1;
 315              		.loc 1 278 0
 316 0004 1748     		ldr	r0, .L19
 317 0006 184B     		ldr	r3, .L19+4
 318 0008 0360     		str	r3, [r0]
 279:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 319              		.loc 1 279 0
 320 000a 0122     		movs	r2, #1
 321 000c 4260     		str	r2, [r0, #4]
 280:Src/main.c    ****   htim3.Init.Period = 1;
 322              		.loc 1 280 0
 323 000e 0023     		movs	r3, #0
 324 0010 8360     		str	r3, [r0, #8]
 281:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 325              		.loc 1 281 0
 326 0012 C260     		str	r2, [r0, #12]
 282:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 327              		.loc 1 282 0
 328 0014 0361     		str	r3, [r0, #16]
 283:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 329              		.loc 1 283 0
 330 0016 8361     		str	r3, [r0, #24]
 284:Src/main.c    ****   {
 331              		.loc 1 284 0
ARM GAS  /tmp/ccazkJww.s 			page 14


 332 0018 FFF7FEFF 		bl	HAL_TIM_Base_Init
 333              	.LVL16:
 334 001c 20B1     		cbz	r0, .L15
 286:Src/main.c    ****   }
 335              		.loc 1 286 0
 336 001e 1348     		ldr	r0, .L19+8
 337 0020 4FF48F71 		mov	r1, #286
 338 0024 FFF7FEFF 		bl	_Error_Handler
 339              	.LVL17:
 340              	.L15:
 289:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 341              		.loc 1 289 0
 342 0028 06A9     		add	r1, sp, #24
 343 002a 4FF48053 		mov	r3, #4096
 344 002e 41F8103D 		str	r3, [r1, #-16]!
 290:Src/main.c    ****   {
 345              		.loc 1 290 0
 346 0032 0C48     		ldr	r0, .L19
 347 0034 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 348              	.LVL18:
 349 0038 20B1     		cbz	r0, .L16
 292:Src/main.c    ****   }
 350              		.loc 1 292 0
 351 003a 0C48     		ldr	r0, .L19+8
 352 003c 4FF49271 		mov	r1, #292
 353 0040 FFF7FEFF 		bl	_Error_Handler
 354              	.LVL19:
 355              	.L16:
 295:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 356              		.loc 1 295 0
 357 0044 0023     		movs	r3, #0
 358 0046 0093     		str	r3, [sp]
 296:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 359              		.loc 1 296 0
 360 0048 0193     		str	r3, [sp, #4]
 297:Src/main.c    ****   {
 361              		.loc 1 297 0
 362 004a 0648     		ldr	r0, .L19
 363 004c 6946     		mov	r1, sp
 364 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 365              	.LVL20:
 366 0052 20B1     		cbz	r0, .L14
 299:Src/main.c    ****   }
 367              		.loc 1 299 0
 368 0054 0548     		ldr	r0, .L19+8
 369 0056 40F22B11 		movw	r1, #299
 370 005a FFF7FEFF 		bl	_Error_Handler
 371              	.LVL21:
 372              	.L14:
 302:Src/main.c    **** 
 373              		.loc 1 302 0
 374 005e 07B0     		add	sp, sp, #28
 375              	.LCFI8:
 376              		.cfi_def_cfa_offset 4
 377              		@ sp needed
 378 0060 5DF804FB 		ldr	pc, [sp], #4
 379              	.L20:
ARM GAS  /tmp/ccazkJww.s 			page 15


 380              		.align	2
 381              	.L19:
 382 0064 00000000 		.word	htim3
 383 0068 00040040 		.word	1073742848
 384 006c 00000000 		.word	.LC0
 385              		.cfi_endproc
 386              	.LFE66:
 388              		.section	.text.SystemClock_Config,"ax",%progbits
 389              		.align	2
 390              		.global	SystemClock_Config
 391              		.thumb
 392              		.thumb_func
 394              	SystemClock_Config:
 395              	.LFB64:
 196:Src/main.c    **** 
 396              		.loc 1 196 0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 64
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400 0000 00B5     		push	{lr}
 401              	.LCFI9:
 402              		.cfi_def_cfa_offset 4
 403              		.cfi_offset 14, -4
 404 0002 91B0     		sub	sp, sp, #68
 405              	.LCFI10:
 406              		.cfi_def_cfa_offset 72
 203:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 407              		.loc 1 203 0
 408 0004 0223     		movs	r3, #2
 409 0006 0693     		str	r3, [sp, #24]
 204:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 410              		.loc 1 204 0
 411 0008 0123     		movs	r3, #1
 412 000a 0A93     		str	r3, [sp, #40]
 205:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 413              		.loc 1 205 0
 414 000c 1023     		movs	r3, #16
 415 000e 0B93     		str	r3, [sp, #44]
 206:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 416              		.loc 1 206 0
 417 0010 0023     		movs	r3, #0
 418 0012 0D93     		str	r3, [sp, #52]
 207:Src/main.c    ****   {
 419              		.loc 1 207 0
 420 0014 06A8     		add	r0, sp, #24
 421 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
 422              	.LVL22:
 423 001a 18B1     		cbz	r0, .L22
 209:Src/main.c    ****   }
 424              		.loc 1 209 0
 425 001c 1348     		ldr	r0, .L25
 426 001e D121     		movs	r1, #209
 427 0020 FFF7FEFF 		bl	_Error_Handler
 428              	.LVL23:
 429              	.L22:
 214:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 430              		.loc 1 214 0
ARM GAS  /tmp/ccazkJww.s 			page 16


 431 0024 0F23     		movs	r3, #15
 432 0026 0193     		str	r3, [sp, #4]
 216:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 433              		.loc 1 216 0
 434 0028 0021     		movs	r1, #0
 435 002a 0291     		str	r1, [sp, #8]
 217:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 436              		.loc 1 217 0
 437 002c 0391     		str	r1, [sp, #12]
 218:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 438              		.loc 1 218 0
 439 002e 0491     		str	r1, [sp, #16]
 219:Src/main.c    **** 
 440              		.loc 1 219 0
 441 0030 0591     		str	r1, [sp, #20]
 221:Src/main.c    ****   {
 442              		.loc 1 221 0
 443 0032 01A8     		add	r0, sp, #4
 444 0034 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 445              	.LVL24:
 446 0038 18B1     		cbz	r0, .L23
 223:Src/main.c    ****   }
 447              		.loc 1 223 0
 448 003a 0C48     		ldr	r0, .L25
 449 003c DF21     		movs	r1, #223
 450 003e FFF7FEFF 		bl	_Error_Handler
 451              	.LVL25:
 452              	.L23:
 228:Src/main.c    **** 
 453              		.loc 1 228 0
 454 0042 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 455              	.LVL26:
 456 0046 0A4B     		ldr	r3, .L25+4
 457 0048 A3FB0030 		umull	r3, r0, r3, r0
 458 004c 8009     		lsrs	r0, r0, #6
 459 004e FFF7FEFF 		bl	HAL_SYSTICK_Config
 460              	.LVL27:
 232:Src/main.c    **** 
 461              		.loc 1 232 0
 462 0052 0420     		movs	r0, #4
 463 0054 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 464              	.LVL28:
 235:Src/main.c    **** }
 465              		.loc 1 235 0
 466 0058 4FF0FF30 		mov	r0, #-1
 467 005c 0021     		movs	r1, #0
 468 005e 0A46     		mov	r2, r1
 469 0060 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 470              	.LVL29:
 236:Src/main.c    **** 
 471              		.loc 1 236 0
 472 0064 11B0     		add	sp, sp, #68
 473              	.LCFI11:
 474              		.cfi_def_cfa_offset 4
 475              		@ sp needed
 476 0066 5DF804FB 		ldr	pc, [sp], #4
 477              	.L26:
ARM GAS  /tmp/ccazkJww.s 			page 17


 478 006a 00BF     		.align	2
 479              	.L25:
 480 006c 00000000 		.word	.LC0
 481 0070 D34D6210 		.word	274877907
 482              		.cfi_endproc
 483              	.LFE64:
 485              		.section	.text.main,"ax",%progbits
 486              		.align	2
 487              		.global	main
 488              		.thumb
 489              		.thumb_func
 491              	main:
 492              	.LFB63:
 112:Src/main.c    **** 
 493              		.loc 1 112 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 8
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497 0000 70B5     		push	{r4, r5, r6, lr}
 498              	.LCFI12:
 499              		.cfi_def_cfa_offset 16
 500              		.cfi_offset 4, -16
 501              		.cfi_offset 5, -12
 502              		.cfi_offset 6, -8
 503              		.cfi_offset 14, -4
 504 0002 82B0     		sub	sp, sp, #8
 505              	.LCFI13:
 506              		.cfi_def_cfa_offset 24
 116:Src/main.c    ****   for (i=0; i<MenuLayers; i++)
 507              		.loc 1 116 0
 508 0004 0023     		movs	r3, #0
 509 0006 0193     		str	r3, [sp, #4]
 117:Src/main.c    ****   {
 510              		.loc 1 117 0
 511 0008 0193     		str	r3, [sp, #4]
 512 000a 07E0     		b	.L28
 513              	.L29:
 119:Src/main.c    ****   };
 514              		.loc 1 119 0 discriminator 3
 515 000c 019A     		ldr	r2, [sp, #4]
 516 000e 0021     		movs	r1, #0
 517 0010 324B     		ldr	r3, .L34
 518 0012 43F82210 		str	r1, [r3, r2, lsl #2]
 117:Src/main.c    ****   {
 519              		.loc 1 117 0 discriminator 3
 520 0016 019B     		ldr	r3, [sp, #4]
 521 0018 0133     		adds	r3, r3, #1
 522 001a 0193     		str	r3, [sp, #4]
 523              	.L28:
 117:Src/main.c    ****   {
 524              		.loc 1 117 0 is_stmt 0 discriminator 1
 525 001c 019A     		ldr	r2, [sp, #4]
 526 001e 304B     		ldr	r3, .L34+4
 527 0020 1B68     		ldr	r3, [r3]
 528 0022 9A42     		cmp	r2, r3
 529 0024 F2D3     		bcc	.L29
 121:Src/main.c    ****   /* Text initialization */
ARM GAS  /tmp/ccazkJww.s 			page 18


 530              		.loc 1 121 0 is_stmt 1
 531 0026 2F4D     		ldr	r5, .L34+8
 532 0028 2B68     		ldr	r3, [r5]
 533 002a 2C4C     		ldr	r4, .L34
 534 002c 0126     		movs	r6, #1
 535 002e 44F82360 		str	r6, [r4, r3, lsl #2]
 123:Src/main.c    ****   sprintf(Text[0],MenuTitle(CurrentMenuPosition));
 536              		.loc 1 123 0
 537 0032 2B68     		ldr	r3, [r5]
 538 0034 54F82330 		ldr	r3, [r4, r3, lsl #2]
 539 0038 0093     		str	r3, [sp]
 124:Src/main.c    ****   CurrentMenuPosition[CurrentLayer]=bufPosition;
 540              		.loc 1 124 0
 541 003a 2046     		mov	r0, r4
 542 003c FFF7FEFF 		bl	MenuTitle
 543              	.LVL30:
 544 0040 0146     		mov	r1, r0
 545 0042 2948     		ldr	r0, .L34+12
 546 0044 FFF7FEFF 		bl	sprintf
 547              	.LVL31:
 125:Src/main.c    ****   for (i=1; i<Lines+1; i++)
 548              		.loc 1 125 0
 549 0048 2B68     		ldr	r3, [r5]
 550 004a 009A     		ldr	r2, [sp]
 551 004c 44F82320 		str	r2, [r4, r3, lsl #2]
 126:Src/main.c    ****   {
 552              		.loc 1 126 0
 553 0050 0196     		str	r6, [sp, #4]
 554 0052 15E0     		b	.L30
 555              	.L31:
 128:Src/main.c    ****     CurrentMenuPosition[CurrentLayer]+=1;
 556              		.loc 1 128 0 discriminator 3
 557 0054 019D     		ldr	r5, [sp, #4]
 558 0056 244B     		ldr	r3, .L34+12
 559 0058 03EB0515 		add	r5, r3, r5, lsl #4
 560 005c 1F4C     		ldr	r4, .L34
 561 005e 2046     		mov	r0, r4
 562 0060 FFF7FEFF 		bl	MenuOption
 563              	.LVL32:
 564 0064 0146     		mov	r1, r0
 565 0066 2846     		mov	r0, r5
 566 0068 FFF7FEFF 		bl	sprintf
 567              	.LVL33:
 129:Src/main.c    ****   };
 568              		.loc 1 129 0 discriminator 3
 569 006c 1D4B     		ldr	r3, .L34+8
 570 006e 1A68     		ldr	r2, [r3]
 571 0070 54F82230 		ldr	r3, [r4, r2, lsl #2]
 572 0074 0133     		adds	r3, r3, #1
 573 0076 44F82230 		str	r3, [r4, r2, lsl #2]
 126:Src/main.c    ****   {
 574              		.loc 1 126 0 discriminator 3
 575 007a 019B     		ldr	r3, [sp, #4]
 576 007c 0133     		adds	r3, r3, #1
 577 007e 0193     		str	r3, [sp, #4]
 578              	.L30:
 126:Src/main.c    ****   {
ARM GAS  /tmp/ccazkJww.s 			page 19


 579              		.loc 1 126 0 is_stmt 0 discriminator 1
 580 0080 019A     		ldr	r2, [sp, #4]
 581 0082 1A4B     		ldr	r3, .L34+16
 582 0084 1B68     		ldr	r3, [r3]
 583 0086 0133     		adds	r3, r3, #1
 584 0088 9A42     		cmp	r2, r3
 585 008a E3D3     		bcc	.L31
 131:Src/main.c    ****   Text[1][0] = '>';
 586              		.loc 1 131 0 is_stmt 1
 587 008c 154B     		ldr	r3, .L34+8
 588 008e 1A68     		ldr	r2, [r3]
 589 0090 0099     		ldr	r1, [sp]
 590 0092 124B     		ldr	r3, .L34
 591 0094 43F82210 		str	r1, [r3, r2, lsl #2]
 132:Src/main.c    ****   /*for (i=0; i<Lines+1; i++)
 592              		.loc 1 132 0
 593 0098 3E22     		movs	r2, #62
 594 009a 134B     		ldr	r3, .L34+12
 595 009c 1A74     		strb	r2, [r3, #16]
 145:Src/main.c    **** 
 596              		.loc 1 145 0
 597 009e FFF7FEFF 		bl	HAL_Init
 598              	.LVL34:
 152:Src/main.c    **** 
 599              		.loc 1 152 0
 600 00a2 FFF7FEFF 		bl	SystemClock_Config
 601              	.LVL35:
 159:Src/main.c    ****   MX_TIM2_Init();
 602              		.loc 1 159 0
 603 00a6 FFF7FEFF 		bl	MX_GPIO_Init
 604              	.LVL36:
 160:Src/main.c    ****   MX_TIM3_Init();
 605              		.loc 1 160 0
 606 00aa FFF7FEFF 		bl	MX_TIM2_Init
 607              	.LVL37:
 161:Src/main.c    **** 
 608              		.loc 1 161 0
 609 00ae FFF7FEFF 		bl	MX_TIM3_Init
 610              	.LVL38:
 165:Src/main.c    ****   /*Debuging LED*/
 611              		.loc 1 165 0
 612 00b2 FFF7FEFF 		bl	SetPins
 613              	.LVL39:
 167:Src/main.c    ****   /*Initialize the timer 2*/
 614              		.loc 1 167 0
 615 00b6 0E48     		ldr	r0, .L34+20
 616 00b8 0121     		movs	r1, #1
 617 00ba 0022     		movs	r2, #0
 618 00bc FFF7FEFF 		bl	HAL_GPIO_WritePin
 619              	.LVL40:
 169:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
 620              		.loc 1 169 0
 621 00c0 0C48     		ldr	r0, .L34+24
 622 00c2 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 623              	.LVL41:
 170:Src/main.c    ****   /*Initialize the timer 3*/
 624              		.loc 1 170 0
ARM GAS  /tmp/ccazkJww.s 			page 20


 625 00c6 1C20     		movs	r0, #28
 626 00c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 627              	.LVL42:
 172:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 628              		.loc 1 172 0
 629 00cc 0A48     		ldr	r0, .L34+28
 630 00ce FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 631              	.LVL43:
 173:Src/main.c    **** 
 632              		.loc 1 173 0
 633 00d2 1D20     		movs	r0, #29
 634 00d4 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 635              	.LVL44:
 636              	.L32:
 188:Src/main.c    ****   /* USER CODE END 3 */
 637              		.loc 1 188 0 discriminator 1
 638 00d8 FEE7     		b	.L32
 639              	.L35:
 640 00da 00BF     		.align	2
 641              	.L34:
 642 00dc 00000000 		.word	CurrentMenuPosition
 643 00e0 00000000 		.word	.LANCHOR0
 644 00e4 00000000 		.word	.LANCHOR1
 645 00e8 00000000 		.word	Text
 646 00ec 00000000 		.word	.LANCHOR2
 647 00f0 00100140 		.word	1073811456
 648 00f4 00000000 		.word	htim2
 649 00f8 00000000 		.word	htim3
 650              		.cfi_endproc
 651              	.LFE63:
 653              		.global	jOnBACK
 654              		.global	jOnOK
 655              		.global	jOnDOWN
 656              		.global	jOnUP
 657              		.global	jTimer
 658              		.global	jOnThreshold
 659              		.global	CheckCircles
 660              		.global	row
 661              		.global	colomn
 662              		.comm	Text,64,4
 663              		.global	TotalPhasesLCDUpdate
 664              		.global	TotalPhasesLCDSetup
 665              		.global	PhaseLCD
 666              		.global	UpdateLCD
 667              		.global	PeriodsToGo
 668              		.global	SetLCD
 669              		.global	portAPin15Counter
 670              		.comm	CurrentMenuPosition,40,4
 671              		.global	CurrentLayer
 672              		.global	MenuLayers
 673              		.global	Lines
 674              		.comm	htim3,64,4
 675              		.comm	htim2,64,4
 676              		.section	.data.CheckCircles,"aw",%progbits
 677              		.align	2
 680              	CheckCircles:
 681 0000 FA000000 		.word	250
ARM GAS  /tmp/ccazkJww.s 			page 21


 682              		.section	.data.colomn,"aw",%progbits
 683              		.align	2
 686              	colomn:
 687 0000 01000000 		.word	1
 688              		.section	.data.TotalPhasesLCDUpdate,"aw",%progbits
 689              		.align	2
 692              	TotalPhasesLCDUpdate:
 693 0000 08000000 		.word	8
 694              		.section	.data.Lines,"aw",%progbits
 695              		.align	2
 696              		.set	.LANCHOR2,. + 0
 699              	Lines:
 700 0000 03000000 		.word	3
 701              		.section	.bss.SetLCD,"aw",%nobits
 704              	SetLCD:
 705 0000 00       		.space	1
 706              		.section	.data.MenuLayers,"aw",%progbits
 707              		.align	2
 708              		.set	.LANCHOR0,. + 0
 711              	MenuLayers:
 712 0000 0A000000 		.word	10
 713              		.section	.bss.jOnBACK,"aw",%nobits
 714              		.align	2
 717              	jOnBACK:
 718 0000 00000000 		.space	4
 719              		.section	.data.UpdateLCD,"aw",%progbits
 722              	UpdateLCD:
 723 0000 01       		.byte	1
 724              		.section	.bss.jOnOK,"aw",%nobits
 725              		.align	2
 728              	jOnOK:
 729 0000 00000000 		.space	4
 730              		.section	.bss.portAPin15Counter,"aw",%nobits
 731              		.align	2
 734              	portAPin15Counter:
 735 0000 00000000 		.space	4
 736              		.section	.rodata.str1.4,"aMS",%progbits,1
 737              		.align	2
 738              	.LC0:
 739 0000 5372632F 		.ascii	"Src/main.c\000"
 739      6D61696E 
 739      2E6300
 740              		.section	.bss.jOnUP,"aw",%nobits
 741              		.align	2
 744              	jOnUP:
 745 0000 00000000 		.space	4
 746              		.section	.bss.jOnDOWN,"aw",%nobits
 747              		.align	2
 750              	jOnDOWN:
 751 0000 00000000 		.space	4
 752              		.section	.data.row,"aw",%progbits
 753              		.align	2
 756              	row:
 757 0000 01000000 		.word	1
 758              		.section	.data.PhaseLCD,"aw",%progbits
 759              		.align	2
 762              	PhaseLCD:
ARM GAS  /tmp/ccazkJww.s 			page 22


 763 0000 01000000 		.word	1
 764              		.section	.data.jOnThreshold,"aw",%progbits
 765              		.align	2
 768              	jOnThreshold:
 769 0000 96000000 		.word	150
 770              		.section	.data.PeriodsToGo,"aw",%progbits
 771              		.align	2
 774              	PeriodsToGo:
 775 0000 E8030000 		.word	1000
 776              		.section	.data.TotalPhasesLCDSetup,"aw",%progbits
 777              		.align	2
 780              	TotalPhasesLCDSetup:
 781 0000 0D000000 		.word	13
 782              		.section	.bss.jTimer,"aw",%nobits
 783              		.align	2
 786              	jTimer:
 787 0000 00000000 		.space	4
 788              		.section	.bss.CurrentLayer,"aw",%nobits
 789              		.align	2
 790              		.set	.LANCHOR1,. + 0
 793              	CurrentLayer:
 794 0000 00000000 		.space	4
 795              		.text
 796              	.Letext0:
 797              		.file 2 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f100xb.h"
 798              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 799              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 800              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 801              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 802              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 803              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 804              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 805              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 806              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 807              		.file 12 "Drivers/CMSIS/Include/core_cm3.h"
 808              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
 809              		.file 14 "Inc/MenuLibrary.h"
 810              		.file 15 "/usr/include/newlib/stdio.h"
 811              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 812              		.file 17 "Inc/LCD.h"
ARM GAS  /tmp/ccazkJww.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccazkJww.s:19     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccazkJww.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccazkJww.s:178    .text.MX_GPIO_Init:00000000000000e8 $d
     /tmp/ccazkJww.s:186    .text._Error_Handler:0000000000000000 $t
     /tmp/ccazkJww.s:191    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccazkJww.s:207    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccazkJww.s:211    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccazkJww.s:292    .text.MX_TIM2_Init:0000000000000068 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccazkJww.s:298    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccazkJww.s:302    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccazkJww.s:382    .text.MX_TIM3_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccazkJww.s:389    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccazkJww.s:394    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccazkJww.s:480    .text.SystemClock_Config:000000000000006c $d
     /tmp/ccazkJww.s:486    .text.main:0000000000000000 $t
     /tmp/ccazkJww.s:491    .text.main:0000000000000000 main
     /tmp/ccazkJww.s:642    .text.main:00000000000000dc $d
                            *COM*:0000000000000028 CurrentMenuPosition
                            *COM*:0000000000000040 Text
     /tmp/ccazkJww.s:717    .bss.jOnBACK:0000000000000000 jOnBACK
     /tmp/ccazkJww.s:728    .bss.jOnOK:0000000000000000 jOnOK
     /tmp/ccazkJww.s:750    .bss.jOnDOWN:0000000000000000 jOnDOWN
     /tmp/ccazkJww.s:744    .bss.jOnUP:0000000000000000 jOnUP
     /tmp/ccazkJww.s:786    .bss.jTimer:0000000000000000 jTimer
     /tmp/ccazkJww.s:768    .data.jOnThreshold:0000000000000000 jOnThreshold
     /tmp/ccazkJww.s:680    .data.CheckCircles:0000000000000000 CheckCircles
     /tmp/ccazkJww.s:756    .data.row:0000000000000000 row
     /tmp/ccazkJww.s:686    .data.colomn:0000000000000000 colomn
     /tmp/ccazkJww.s:692    .data.TotalPhasesLCDUpdate:0000000000000000 TotalPhasesLCDUpdate
     /tmp/ccazkJww.s:780    .data.TotalPhasesLCDSetup:0000000000000000 TotalPhasesLCDSetup
     /tmp/ccazkJww.s:762    .data.PhaseLCD:0000000000000000 PhaseLCD
     /tmp/ccazkJww.s:722    .data.UpdateLCD:0000000000000000 UpdateLCD
     /tmp/ccazkJww.s:774    .data.PeriodsToGo:0000000000000000 PeriodsToGo
     /tmp/ccazkJww.s:704    .bss.SetLCD:0000000000000000 SetLCD
     /tmp/ccazkJww.s:734    .bss.portAPin15Counter:0000000000000000 portAPin15Counter
     /tmp/ccazkJww.s:793    .bss.CurrentLayer:0000000000000000 CurrentLayer
     /tmp/ccazkJww.s:711    .data.MenuLayers:0000000000000000 MenuLayers
     /tmp/ccazkJww.s:699    .data.Lines:0000000000000000 Lines
     /tmp/ccazkJww.s:677    .data.CheckCircles:0000000000000000 $d
     /tmp/ccazkJww.s:683    .data.colomn:0000000000000000 $d
     /tmp/ccazkJww.s:689    .data.TotalPhasesLCDUpdate:0000000000000000 $d
     /tmp/ccazkJww.s:695    .data.Lines:0000000000000000 $d
     /tmp/ccazkJww.s:705    .bss.SetLCD:0000000000000000 $d
     /tmp/ccazkJww.s:707    .data.MenuLayers:0000000000000000 $d
     /tmp/ccazkJww.s:714    .bss.jOnBACK:0000000000000000 $d
     /tmp/ccazkJww.s:725    .bss.jOnOK:0000000000000000 $d
     /tmp/ccazkJww.s:731    .bss.portAPin15Counter:0000000000000000 $d
     /tmp/ccazkJww.s:737    .rodata.str1.4:0000000000000000 $d
     /tmp/ccazkJww.s:741    .bss.jOnUP:0000000000000000 $d
     /tmp/ccazkJww.s:747    .bss.jOnDOWN:0000000000000000 $d
     /tmp/ccazkJww.s:753    .data.row:0000000000000000 $d
     /tmp/ccazkJww.s:759    .data.PhaseLCD:0000000000000000 $d
     /tmp/ccazkJww.s:765    .data.jOnThreshold:0000000000000000 $d
ARM GAS  /tmp/ccazkJww.s 			page 24


     /tmp/ccazkJww.s:771    .data.PeriodsToGo:0000000000000000 $d
     /tmp/ccazkJww.s:777    .data.TotalPhasesLCDSetup:0000000000000000 $d
     /tmp/ccazkJww.s:783    .bss.jTimer:0000000000000000 $d
     /tmp/ccazkJww.s:789    .bss.CurrentLayer:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
MenuTitle
sprintf
MenuOption
HAL_Init
SetPins
HAL_TIM_Base_Start_IT
HAL_NVIC_EnableIRQ
